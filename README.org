* A Personal Emacs Configuration

[[https://github.com/jsntn/emacs.d/actions/workflows/myelpa.yml][https://github.com/jsntn/emacs.d/actions/workflows/myelpa.yml/badge.svg]]

Behold, dear visitor, my cherished Emacs configuration, meticulously crafted and refined since the year of 2020. With unwavering dedication, I tirelessly endeavor to harmonize its functioning across both the Windows and macOS operating systems. ðŸ™‚

* Table of Content                                                              :noexport:TOC_4:
- [[#a-personal-emacs-configuration][A Personal Emacs Configuration]]
- [[#usage][Usage]]
- [[#setup][Setup]]
  - [[#key-bindings][Key Bindings]]
- [[#the-dependencies][The Dependencies]]
  - [[#aspell][Aspell]]
  - [[#flycheck][Flycheck]]
    - [[#python][Python]]
    - [[#shell][Shell]]
    - [[#yaml][YAML]]
  - [[#plantuml][PlantUML]]
- [[#the-dependencies-installation][The Dependencies Installation]]
  - [[#for-windows-platform-specifics][For Windows Platform Specifics]]
    - [[#emacsql-sqlite-binary][EmacSQL SQLite Binary]]
  - [[#for-macos-platform-specifics][For macOS Platform Specifics]]
- [[#windows-platform-portable-software-integration][Windows Platform: Portable Software Integration]]
  - [[#flycheck-1][Flycheck]]
    - [[#portable-python---winpython][Portable Python - WinPython]]
      - [[#python-flake8][python-flake8]]
      - [[#yaml-yamllint][yaml-yamllint]]
  - [[#graphviz][GraphViz]]
  - [[#plantuml-1][PlantUML]]
  - [[#winpython][WinPython]]
- [[#known-issue][Known Issue]]

* Usage
TODO
* Setup
Basically, following the [[#the-dependencies][the dependencies]] section is enough to set up.

If you're a big fan of [[//haikebang.com/secure-portable.html][portable software on Windows platform]] like me, please
refer to [[#windows-platform-portable-software-integration][Windows Platform: Portable Software Integration]].
** Key Bindings
Key Bindings are managed by [[https://github.com/noctuid/general.el][general.el]], and the bindings configuration can be
found from [[https://github.com/jsntn/emacs.d/blob/master/lisp/init-keybindings.el][here]].
* The Dependencies
** Aspell
GNU Aspell is a Free and Open Source spell checker designed to eventually
replace Ispell. It can either be used as a library or as an independent spell
checker. Its main feature is that it does a superior job of suggesting possible
replacements for a misspelled word than just about any other spell checker out
there for the English language. ([[http://aspell.net][via]])
** Flycheck
*** Python
I use =python-flake8= as Python checker, refer to =requirements.txt=.
*** Shell
I use =sh-shellcheck= as Shell checker, refer to this [[https://github.com/koalaman/shellcheck/][link]] for installation.
*** YAML
I use =js-yaml= as YAML checker on my PC, this can be [[https://github.com/jsntn/emacs.d/commit/923aabd1dcfe55f8e65177b02a3d99a2ef49a80b][installed with Scoop]]
easily.

=yaml-yamllint= is another option as YAML checker, refer to =requirements.txt=.
** PlantUML
The PlantUML is run as a local JAR file, which is configured in the
[[https://github.com/jsntn/emacs.d/blob/master/lisp/init-plantuml.el][init-plantuml.el]]. And the plantuml.jar can be downloaded from [[https://plantuml.com/download][official download
page]].
* The Dependencies Installation
The following command will install the Python packages according to the
configuration file [[//github.com/jsntn/emacs.d/blob/master/requirements.txt][requirements.txt]],

#+BEGIN_SRC shell
$ pip install -r requirements.txt
#+END_SRC

Apart from the Python packages, refer to the sections below to proceed with
other dependencies installation.
** For Windows Platform Specifics
I [[//jason.haikebang.com/posts/scoop/][started using Scoop]] to manage some of my apps and dependencies, including,
- Aspell
  #+BEGIN_SRC powershell
  scoop install aspell
  #+END_SRC
- Prettier
  #+BEGIN_SRC powershell
  scoop install nodejs
  npm install -g prettier
  #+END_SRC
- ShellCheck
  #+BEGIN_SRC powershell
  scoop install shellcheck
  #+END_SRC
- shfmt
  #+BEGIN_SRC powershell
  scoop install shfmt
  #+END_SRC
- js-yaml
  #+BEGIN_SRC powershell
  scoop install nodejs
  npm install -g js-yaml
  #+END_SRC
*** EmacSQL SQLite Binary
In case of getting the error message: "No EmacSQL SQLite binary available,
aborting", follow [[//github.com/org-roam/org-roam/blob/e1873a6a1660b5c4f850df2da578d1a1b851f8ac/doc/installation.md#windows][this]] to fix.
** For macOS Platform Specifics
On macOS, I [[//jsntn.com/mac/2017/12/09/homebrew.html][use Homebrew]] to manage apps, including,
- Aspell
  #+BEGIN_SRC shell
  brew install aspell
  #+END_SRC
- GraphViz
  #+BEGIN_SRC shell
  brew install graphviz
  #+END_SRC
  You might prefer using the verified GraphViz as mentioned in [[//plantuml.com/en/faq][Which version of
  GraphViz should I use]], [[//gist.github.com/jsntn/ef16c658aeef04da45635209e9b5e32b][here]] is a log example of my GraphViz 2.44.0
  installation.
- ShellCheck
  #+BEGIN_SRC shell
  brew install shellcheck
  #+END_SRC
- shfmt
  #+BEGIN_SRC shell
  brew install shfmt
  #+END_SRC
* Windows Platform: Portable Software Integration
** Flycheck
*** Portable Python - WinPython
For the packages are installed in a portable Python like [[#winpython][WinPython]], executable
paths should be configured manually.
**** python-flake8
I.e.,
#+BEGIN_SRC lisp
(setq flycheck-python-flake8-executable "V:/WPy32-3810/python-3.8.1/Scripts/flake8.exe")
#+END_SRC
**** yaml-yamllint
I.e.,
#+BEGIN_SRC lisp
(setq flycheck-yaml-yamllint-executable "V:/WPy32-3810/python-3.8.1/Scripts/yamllint.exe")
#+END_SRC
** GraphViz
Refer to the [[//plantuml.com/en/graphviz-dot][GraphViz]] post from PlantUML website.

In case of using portable GraphViz, specify the environment variable
=GRAPHVIZ_DOT= to set the exact location of your GraphViz executable.

I.e.,
#+BEGIN_SRC lisp
(setenv "GRAPHVIZ_DOT" "V:/bin/GraphvizPortable/App/graphviz/bin/dot.exe")
#+END_SRC
** PlantUML
For portable plantuml.jar integration, i.e.,
#+BEGIN_SRC lisp
(setq plantuml-jar-path "V:/bin/plantuml.jar")
(setq org-plantuml-jar-path
      (expand-file-name "V:/bin/plantuml.jar"))
#+END_SRC
** [[//winpython.github.io][WinPython]]
WinPython is a portable distribution of the Python programming language for
Windows.
* Known Issue
I use [[https://github.com/jwiegley/use-package][use-package]] to manage packages in [[https://github.com/jsntn/emacs.d/blob/master/lisp/init-packages.el][init-packages.el]].

However, it seems the hl-todo and org-bullets settings don't work if they are
configured in the init-packages.el, i.e., [[https://github.com/jsntn/emacs.d/commit/1e409e075024d72f2dc7520ada092b04b3012f48#diff-aeac2722d1b94adc236ce40df31d9cb7eb107e43b95c13c6c795e71044ec2c29L119-L138][link 1]] and [[https://github.com/jsntn/emacs.d/commit/1e409e075024d72f2dc7520ada092b04b3012f48#diff-aeac2722d1b94adc236ce40df31d9cb7eb107e43b95c13c6c795e71044ec2c29L150-L152][link 2]], but both of them
are effective if I move them to [[https://github.com/jsntn/emacs.d/commit/19e71501432f5b5ba36375ad711eb62a3fbe91d4#diff-54e03c0bf9c47228b3868e00ea21baade79013af33501ff53bbadbd26060a227R32-R35][init-display.el]] and my [[https://github.com/jsntn/emacs.d/blob/1e409e075024d72f2dc7520ada092b04b3012f48/init.el#L98][local-config.el]].
